import React from 'react';
import { useNavigate } from 'react-router-dom';
import moment from 'moment';
import Slider from 'react-slick';
import Card from '@src/components/common/card/Card';
import Button from '@src/components/common/Button';
import { useRaffles } from '../hooks/useRaffles';
import { IRaffleDetails } from '../types';

const PrevArrow: React.FC<{ onClick?: () => void }> = (props) => (
  <div className="slick-arrow slick-prev" onClick={props.onClick}>
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M18.0473 20L26.2973 28.25L23.9407 30.6067L13.334 20L23.9407 9.39334L26.2973 11.75L18.0473 20Z" fill="#929292"/>
    </svg>
  </div>
);

const NextArrow: React.FC<{ onClick?: () => void }> = (props) => (
  <div className="slick-arrow slick-next" onClick={props.onClick}>
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M21.9531 20L13.7031 11.75L16.0598 9.39334L26.6665 20L16.0598 30.6067L13.7031 28.25L21.9531 20Z" fill="#929292"/>
    </svg>
  </div>
);

const sliderSettings = {
  dots: false,
  infinite: false,
  speed: 500,
  slidesToShow: 4,
  slidesToScroll: 1,
  prevArrow: <PrevArrow />,
  nextArrow: <NextArrow />,
  responsive: [
    {
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
      },
    },
    {
      breakpoint: 768,
      settings: {
        slidesToShow: 2,
      },
    },
    {
      breakpoint: 480,
      settings: {
        slidesToShow: 1,
      },
    },
  ],
};

interface RaffleDetailsProps {
  className?: string;
}

const RaffleDetails: React.FC<RaffleDetailsProps> = ({ className = '' }) => {
  const navigate = useNavigate();
  const { raffles, loading, error } = useRaffles(true);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-purple-500" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center text-red-500 py-8">
        {error}
      </div>
    );
  }

  return (
    <div className={`text-white ${className}`}>
      <div className="pt-15 max-w-[900px] mx-auto">
        <div className="text-center">
          <h2 className="text-center font-bold text-[20px] tracking-widest">
            Upcoming Raffles
          </h2>
          <div className="mt-6 text-center text-theme-grey mx-auto">
            <div>
              Use the NANA points generated by staking your TRIBE apes to
              enter our raffles.
            </div>
            <div>There are some awesome prizes to be won!</div>
          </div>
        </div>

        <div className="mt-10 sliderOuter">
          <Slider {...sliderSettings}>
            {(raffles || []).map((raffle: IRaffleDetails) => (
              <div key={raffle.id} className="px-2">
                <Card className="cardwrapper">
                  <div className="relative">
                    <img
                      src={raffle.prize_image}
                      alt={raffle.project_name}
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                    <div className="absolute bottom-2 flex justify-between w-full text-[12px] px-2">
                      <div className="bg-white text-[#80839A] font-semibold py-1 px-2 rounded-full">
                        #{raffle.nft_id}
                      </div>
                      <div className="bg-[#ffc700] text-black font-bold px-2 py-1 rounded-full whitespace-nowrap">
                        {Math.max(
                          moment.utc(raffle.raffle_at).diff(moment.utc(), "days"),
                          0
                        )}{" "}
                        Days Left
                      </div>
                    </div>
                  </div>

                  <div className="p-4">
                    <h4 className="font-semibold">{raffle.project_name}</h4>
                    <p className="mt-1 text-xs text-[#80839A]">
                      #{raffle.nft_id}
                    </p>
                    
                    <Button
                      onClick={() => navigate(`/raffle/${raffle.id}`)}
                      className="w-full mt-4"
                    >
                      Enter Now
                    </Button>

                    <div className="py-3 font-semibold text-center text-[#80839A] text-xs">
                      {raffle.entry_count.toLocaleString()} ENTRIES
                    </div>
                  </div>
                </Card>
              </div>
            ))}
          </Slider>
        </div>
      </div>
    </div>
  );
};

export default RaffleDetails;